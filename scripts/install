#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================
set -eu
source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC

# This is a multi-instance app, meaning it can be installed several times independently
# The id of the app as stated in the manifest is available as $YNH_APP_ID
# The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
# The app instance name is available as $YNH_APP_INSTANCE_NAME
#    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
#    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
#    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
# The app instance name is probably what you are interested the most, since this is
# guaranteed to be unique. This is a good unique identifier to define installation path,
# db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

# Check web path availability
ynh_webpath_available "$domain" "$path_url"
# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

mkdir -p "$final_path"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" admin "$admin"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" final_path "$final_path"

#=================================================
# STANDARD MODIFICATIONS
#=================================================

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies git virtualenv python-virtualenv libgit2-dev \
                 libjpeg-dev gcc libffi-dev python-dev python-cffi \
                 python-gdbm python-psycopg2 \
                 postgresql uwsgi uwsgi-plugin-python redis-server

#=================================================
# CREATE A PostgreSQL DATABASE
#=================================================

ynh_psql_test_if_first_run

db_name=$(ynh_sanitize_dbid "$app")
ynh_app_setting_set "$app" db_name "$db_name"

# Initialize database and store postgres password for upgrade
ynh_psql_setup_db "$db_name" "$app"

systemctl reload postgresql

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

ynh_system_user_create "$app" "${final_path}"

#=================================================
# SPECIFIC SETUP
#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_add_systemd_config "$app-worker" "pagure-worker.service"

#=================================================
# setup pagure.cfg
#=================================================

secret_key=$(ynh_string_random)
salt_email=$(ynh_string_random)

redis_db=$(ynh_redis_get_free_db)
ynh_app_setting_set "$app" redis_db "$redis_db"

cp ../conf/pagure.cfg.sample "$final_path/pagure.cfg"
ynh_replace_string "__REDIS_DB__"   "$redis_db"   "$final_path/pagure.cfg"
ynh_replace_string "__SECRET_KEY__" "$secret_key" "$final_path/pagure.cfg"
ynh_replace_string "__DB_USER__"    "$app"        "$final_path/pagure.cfg"
ynh_replace_string "__DB_PWD__"     "$db_pwd"     "$final_path/pagure.cfg"
ynh_replace_string "__DB_NAME__"    "$db_name"    "$final_path/pagure.cfg"
ynh_replace_string "__DOMAIN__"     "$domain"     "$final_path/pagure.cfg"
ynh_replace_string "__SALT_EMAIL__" "$salt_email" "$final_path/pagure.cfg"
ynh_replace_string "__ADMIN__"      "$admin"      "$final_path/pagure.cfg"

#=================================================
# setup pagure.wsgi
#=================================================

cp ../conf/pagure.wsgi "$final_path/pagure.wsgi"
ynh_replace_string "__FINALPATH__" "$final_path"   "$final_path/pagure.wsgi"

#=================================================
# setup uwsgi service
#=================================================

ynh_add_uwsgi_service

#=================================================
# Get Pagure source
#=================================================

ynh_setup_source_local "${final_path}"
ln -s "${final_path}/pagure-4.0.3" "${final_path}/pagure"

#=================================================
# PIP INSTALLATION
#=================================================
virtualenv "${final_path}/venv"
#run source in a 'sub shell'
(
	set +o nounset
	source "${final_path}/venv/bin/activate"
	set -o nounset
	pip install cffi
	pip install pygit2==0.24
	pip install -r "${final_path}/pagure/requirements.txt"
	pip install psycopg2-binary cryptography py-bcrypt python-fedora
)

#=================================================
# SPECIFIC SETUP Filling up the database
#==========================================

# Create the folder that will receive the projects, forks, docs, requests and tickets' git repo:
mkdir -p "${final_path}"/lcl/{repos,docs,forks,tickets,requests,remotes,attachments,releases}

(
	set +eu
	source "${final_path}/venv/bin/activate"
	cd "${final_path}/pagure"
	PAGURE_CONFIG=${final_path}/pagure.cfg python createdb.py
)

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
chown -R "$app": "$final_path"

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# START PAGURE
#=================================================

systemctl start "uwsgi-app@$app.service"

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
